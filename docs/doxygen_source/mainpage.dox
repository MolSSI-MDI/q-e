/**

\mainpage

\section overview_sec Overview

The MolSSI Driver Interface (MDI) library enables codes to interoperate via the MDI.

\section source_sec Source Code

The source code of the MDI library is available at GitHub at https://github.com/MolSSI/MDI_Library

\section main_doc_sec Main Documentation

\ref tutorials

\section commands_sec MDI Standard



\subsection initialization_options MDI Initialization Options

\par
<b> -role: </b> The role of this code in the context of MDI communication.  Valid arguments are DRIVER and ENGINE <br>
<b> -name: </b> A short string that identifies this code.  See the \c <NAME command for more information. <br>
<b> -method: </b> The method by which MDI will handle communication between the codes.  Valid arguments are MPI and TCP. <br>
<b> -hostname: </b> For ENGINES, when using the TCP communication method, specifies the hostname of the driver. <br>
<b> -port: </b> When using the TCP communication method, specifies the port at which the driver will listen for incoming connections.

\subsection command_list Command List

The following is a list of commands that are officially part of the MDI standard.

All physical quantities communicated through MDI must be expressed in atomic units.



\subsubsection atomic_step ATOM_STEP

The engine performs a time propagation step for the atomic coordinates.
The engine updates its energy, which can be queried with the \c <ENERGY command.



\subsubsection set_cell >CELL

The driver sends a set of cell vectors to the engine, which resizes its simulation cell to the dimensions specified by the cell vectors.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> 9 <br>
<b> Injection: </b> Immediate <br>
<b> Note: </b> In the case of a quantum chemistry code that uses a plane wave basis set, the engine will recalculate the g-vectors either immediately or at the beginning of the next SCF command.



\subsubsection recv_cell <CELL

The engine sends a set of cell vectors to the driver, in the same format as specified for the \c >CELL command.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> 9


\subsubsection send_charges >CHARGES

The driver sends a set of atomic charges to the engine, which replaces its atomic charges with those sent by the driver.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> \c <NATOMS <br>
<b> Format: </b> Sequentially ascending order of atomic index <br>
<b> Injection: </b> Immediate <br>



\subsubsection recv_charges <CHARGES

The engine sends a set of atomic charges to the driver, in the same format as specified for the \c >CHARGES command.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> \c <NATOMS <br>
<b> Format: </b> Sequentially ascending order of atomic index



\subsubsection send_coords >COORDS

The driver sends a set of atomic coordinates to the engine, which replaces its atomic coordinates with those sent by the driver.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the coordinates for each individual atom being provided in xyz order <br>
<b> Injection: </b> Immediate



\subsubsection recv_coords <COORDS

The engine sends a set of atomic coordinates to the driver.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the coordinates for each individual atom being provided in xyz order



\subsubsection recv_energy <ENERGY

The engine sends its most recently calculated energy to the driver.
The \c MD_INIT, \c SCF, and \c ATOM_STEP commands can be used to cause the engine to calculate a new energy.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> 1



\subsubsection exit_command EXIT

The engine terminates and can no longer be sent commands.



\subsubsection send_forces >FORCES

The driver sends a set of atomic forces to the engine, which replaces its internal forces with the forces sent by the driver.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>
<b> Injection: </b> In response to the \c ATOM_STEP command, after any normal calculation of forces and immediately prior to propagation of the atomic positions



\subsubsection send_add_forces >+FORCES

The driver sends a set of atomic forces to the engine, which adds the forces sent by the driver to its internal forces.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>
<b> Injection: </b> In response to the \c ATOM_STEP command, after any normal calculation of forces and immediately prior to propagation of the atomic positions



\subsubsection recv_forces <FORCES

The engine calculates and sends a set of atomic forces to the driver.
These forces include all force contributions, including the force contributions associated with any constraint algorithm (e.g. SHAKE, RATTLE, etc.).

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order



\subsubsection recv_masses <MASSES

The engine sends the driver the mass of each of the atom types.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> <NTYPES </c> <br>
<b> Format: </b> Sequentially ascending order of type index (see the \c <TYPES command)



\subsubsection md_init MD_INIT

The engine performs any initialization operations that are necessary before an MD simulation can be time propagated through the use of the \c ATOM_STEP command.
This engine calculates the energy of the system, which can be queried by the \c <ENERGY command.

\par
<b> Note: </b> This command may change the engine's atomic coordinates under certain circumstances, such as if the SHAKE algorithm is used.



\subsubsection send_name <NAME

The engine sends the driver a string that corresponds to the argument of \c -name in the MDI initialization options.
This argument allows a driver to identify the purpose of connected engine codes within the simulation.
For example, a particular QM/MM driver might require a connection with a single MM code and a single QM code, with the expected name of the MM code being "MM" and the expected name of the QM code being "QM".
After initializing MDI and accepting communicators to the engines, the driver can use this command to identify which of the engines is the MM code and which is the QM code.

\par
<b> Data Type: </b> MDI_CHAR <br>
<b> Quantity: </b> <c> MDI_NAME_LENGTH </c>



\subsubsection recv_natoms <NATOMS

The engine sends the driver the number of atoms in the engine's system.

\par
<b> Data Type: </b> MDI_INT <br>
<b> Quantity: </b> 1



\subsubsection recv_types <NTYPES

The engine sends the driver the number of different types of atoms (e.g. "H", "He", "C", "O", etc.) in the engine's system.

\par
<b> Data Type: </b> MDI_INT <br>
<b> Quantity: </b> 1



\subsubsection send_preforces >PRE-FORCES

The driver sends a set of atomic forces to the engine, which replaces its internal forces with the forces sent by the driver.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>
<b> Injection: </b> In response to the \c ATOM_STEP command, after calculation of all forces except those related to constraint algorithms (e.g. SHAKE, RATTLE, etc.) and prior to application of any constraint algorithms



\subsubsection send_add_preforces >+PRE-FORCES

The driver sends a set of atomic forces to the engine, which adds the forces sent by the driver to its internal forces.

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order <br>
<b> Injection: </b> In response to the \c ATOM_STEP command, after calculation of all forces except those related to constraint algorithms (e.g. SHAKE, RATTLE, etc.) and prior to application of any constraint algorithms



\subsubsection recv_preforces <PRE-FORCES

The engine calculates and sends a set of atomic forces to the driver.
These forces include all force contributions except those associated with any constraint algorithm (e.g. SHAKE, RATTLE, etc.).

\par
<b> Data Type: </b> MDI_DOUBLE <br>
<b> Quantity: </b> <c> 3 * <NATOMS </c> <br>
<b> Format: </b> Sequentially ascending order of atomic index, with the forces for each individual atom being provided in xyz order



\subsubsection scf_command SCF

The engine performs a full self-consistent field calculation in order to relax the electronic density distribution.
The engine updates its energy, which can be queried with the \c <ENERGY command.

**/

// >CELL: Define whether the atomic coordinates are scaled.
// >CELL: Describe in detail the format of the cell coordinates
// <FORCES: Need to clarify when forces are recalculated.
// <PRE-FORCES: Need to clarify when forces are recalculated.
// >STRESS: Add commands for stresses
// >STRESS: Describe in detail the format of the stress tensor
// >STRESS: Clarify when stresses are recalculated
