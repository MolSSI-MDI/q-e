/** \page tutorials Tutorials

\section aimd_tutorial AIMD Driver Tutorial

In this tutorial, we will set up a simple driver for running <em> Ab Initio </em> Molecular Dynamics (AIMD) simulations.
We will use a quantum chemistry (QM) code to compute the forces, while using a molecular mechanics (MM) code to propagate the atomic coordinates each time step.

\subsection requirements_sec Creating a New Project

The easiest way to start work on a new driver is to use the MDI Driver Cookiecutter, which will automatically do most of the preparatory work for you.
Using the cookiecutter will require that you have Python and Cookiecutter on your machine.
If you do not already have Python installed, follow the directions on the <a href="https://www.python.org/">Python Website</a> and install both Python and the \c pip installer tool.
To install Cookiecutter, type:

\code
pip install cookiecutter
\endcode

If you are running on an external machine and do not have write permission to the system directories, you may need to add the \c --user option:

\code
pip install --user cookiecutter
\endcode

Now use Cookiecutter to create a new driver project:

\code
cookiecutter git@github.com:MolSSI/MDI_Driver_Cookiecutter.git
\endcode

When prompted for the \c repo_name, type \c aimd.
This will create a new directory called \c aimd and populate it with some of the things you will need for the driver, including a copy of the MDI Library.
The overall directory structure is:
\code
.
└── aimd
    ├── CMakeLists.txt
    ├── aimd
    │   ├── CMakeLists.txt
    │   ├── STUBS_MPI
    │   │   └── mpi.h
    │   └── aimd.cpp
    └── lib
        └── mdi
            ...
\endcode

\subsection writing_sec Writing the Driver

Open the file called \c aimd.cpp.
It contains the following code:

\code
#include <iostream>
#include <mpi.h>
#include <string.h>
extern "C" {
#include "mdi.h"
}

using namespace std;

int main(int argc, char **argv) {

  // Initialize the MPI environment
  MPI_Comm world_comm;
  MPI_Init(&argc, &argv);

  // Ensure the mdi argument has been provided 
  // NOTE: Assumes that -mdi is the first option provided
  int iarg = 1;
  if ( !( argc-iarg >= 2 && strcmp(argv[iarg],"-mdi") == 0) ) {
    throw string("The -mdi argument was not provided.");
  }

  // Initialize the MDI library
  world_comm = MPI_COMM_WORLD;
  int ret = MDI_Init(argv[iarg+1], &world_comm);
  if ( ret != 0 ) {
    throw string("The MDI library was not initialized correctly.");
  }

  // Connect to the engines
  // <YOUR CODE GOES HERE>

  // Perform the simulation
  // <YOUR CODE GOES HERE>

  // Send the "EXIT" command to each of the engines
  // <YOUR CODE GOES HERE>

  // Synchronize all MPI ranks
  MPI_Barrier(world_comm);

  return 0;
}
\endcode

The first few lines of code simply initialize both MPI and and MDI.
Don't worry if you don't have access to an MPI library - the code will just fall back to a set of dummy MPI functions provided in \c STUBS_MPI.
The code also checks for a \c -mdi command line argument, which is used in the call to \c MDI_Init.

After initializing MDI, we need to connect the driver to its engines.
For this particular tutorial, we will use a QM engine to calculate forces and an MM engine to update the atomic coordinates each timestep.
In the MDI standard, engines request a connection to a driver.
The driver simply calls the \c MDI_Accept_Communicator() function to accept the connection, like this:

\code
MDI_Comm comm = MDI_Accept_Communicator();
\endcode

The return value of \c MDI_Accept_Communicator is an MDI communicator, which functions very similarly to an MPI communicator and is used in certain MDI function calls to identify which engine is expected to send/receive data to/from the driver.
Our AIMD driver will connect to two different engines, so we will be calling \c MDI_Accept_Communicator() twice.
We don't know the order in which the engines will request a connection to the driver, so we will need some way to determine which engine is the QM code and which engine is the MM code.

This can be accomplished through the use of the \"\c <NAME\" command.
The entire MDI standard is built around the idea that drivers can send "commands" to engines, each of which is defined by the MDI standard and has a specific outcome.
The \"\c <NAME\" command tells the engine to send the driver a string of length \c MDI_NAME_LENGTH that identifies the engine.
The user indicates the name of each engine at runtime, using a command line argument that will be described later in \ref running_sec.
As authors of a driver, we will need to decide what we expect any drivers to be named and clearly document that decision for any users.
For the purpose of this tutorial, we will expect the quantum mechanics code to be called "QM" and the molecular mechanics code to be named "MM".

Sending the \"\c <NAME\" command to an engine and then receiving the engine's name can be done as follows:

\code
char* code_name = new char[MDI_NAME_LENGTH];
MDI_Send_Command("<NAME", comm);
MDI_Recv(code_name, MDI_NAME_LENGTH, MDI_CHAR, comm);
\endcode



The following code accepts connections from two engines and assigns the communicator from the engine named "MM" to \c mm_comm and assigns the communicator from the engine named "QM" to \c qm_comm.
Place it immediately after the comment that reads \"<c>Connect to the engines</c>\".

\code
  // Connect to the engines
  MDI_Comm mm_comm = MDI_NULL_COMM;
  MDI_Comm qm_comm = MDI_NULL_COMM;
  int nengines = 2;
  for (int iengine=0; iengine < nengines; iengine++) {
    MDI_Comm comm = MDI_Accept_Communicator();

    // Determine the name of this engine
    char* engine_name = new char[MDI_NAME_LENGTH];
    MDI_Send_Command("<NAME", comm);
    MDI_Recv(engine_name, MDI_NAME_LENGTH, MDI_CHAR, comm);

    cout << "Engine name: " << engine_name << endl;

    if ( strcmp(engine_name, "MM") == 0 ) {
      if ( mm_comm != MDI_NULL_COMM ) {
        throw string("Accepted a communicator from a second MM engine.");
      }
      mm_comm = comm;
    }
    else if ( strcmp(engine_name, "QM") == 0 ) {
      if ( qm_comm != MDI_NULL_COMM ) {
        throw string("Accepted a communicator from a second QM engine.");
      }
      qm_comm = comm;
    }
    else {
      throw string("Unrecognized engine name.");
    }

    delete[] engine_name;
  }
\endcode

We are now ready to use MDI to orchestrate an AIMD simulation.
In broad terms, during each dynamics iteration we will send a set of atomic coordinates from the MM engine to the QM engine, order the QM system to compute the atomic forces, send those forces to the MM engine, and order the MM engine to perform a time step.

Keep in mind that the driver doesn't know anything about the simulated system beyond what it can query by sending MDI commands.
MDI engines initialize basic information about the system using whatever input file format the engine's developer chose.
In particular, when run as engines LAMMPS and QE will read normal input files for LAMMPS and QE, respectively, initialize their system, and then request a connection to the driver.
The driver can request information about the engine's system by sending certain MDI commands.
For example, to determine the number of atoms in the MM engine's system, you could do:

\code
  // Receive the number of atoms from the MM engine
  int natoms;
  MDI_Send_Command("<NATOMS", mm_comm);
  MDI_Recv(&natoms, 1, MDI_INT, mm_comm);
\endcode

Similarly, to learn the coordinates of the atoms in the MM engine's system, you could do:

\code
  // Receive the coordinates from the MM engine
  double coords[3*natoms];
  MDI_Send_Command("<COORDS", mm_comm);
  MDI_Recv(&coords, 3*natoms, MDI_DOUBLE, mm_comm);
\endcode

You could then update the coordinates of the QM engine's system:

\code
  // Send the coordinates to the QM engine
  MDI_Send_Command(">COORDS", qm_comm);
  MDI_Send(&coords, 3*natoms, MDI_DOUBLE, qm_comm);
\endcode

\note
As we will discuss later in \ref running_sec, this driver assumes that the engines have both been initialized with the same number of atoms, the same atom types and ordering of atom types, and the same cell dimensions.

The following code will handle all of the work associated with driving an AIMD simulation.
Place it immediately after the comment that reads \"<c>Perform the simulation</c>\".

\code
  // Perform the simulation
  int niterations = 10;  // Number of MD iterations
  int natoms;
  double qm_energy;
  double mm_energy;

  // Receive the number of atoms from the MM engine
  MDI_Send_Command("<NATOMS", mm_comm);
  MDI_Recv(&natoms, 1, MDI_INT, mm_comm);

  // Allocate the arrays for the coordinates and forces
  double coords[3*natoms];
  double forces[3*natoms];

  // Have the MD engine initialize a new MD simulation
  MDI_Send_Command("MD_INIT", mm_comm);

  // Perform each iteration of the simulation
  for (int iiteration = 0; iiteration < niterations; iiteration++) {

    // Receive the coordinates from the MM engine
    MDI_Send_Command("<COORDS", mm_comm);
    MDI_Recv(&coords, 3*natoms, MDI_DOUBLE, mm_comm);

    // Send the coordinates to the QM engine
    MDI_Send_Command(">COORDS", qm_comm);
    MDI_Send(&coords, 3*natoms, MDI_DOUBLE, qm_comm);

    // Have the QM engine perform an SCF calculation
    MDI_Send_Command("SCF", qm_comm);

    // Get the QM energy
    MDI_Send_Command("<ENERGY", qm_comm);
    MDI_Recv(&qm_energy, 1, MDI_DOUBLE, qm_comm);

    // Get the MM energy
    MDI_Send_Command("<ENERGY", mm_comm);
    MDI_Recv(&mm_energy, 1, MDI_DOUBLE, mm_comm);

    // Receive the forces from the QM engine
    MDI_Send_Command("<PRE-FORCES", qm_comm);
    MDI_Recv(&forces, 3*natoms, MDI_DOUBLE, qm_comm);

    // Send the forces to the MM engine
    MDI_Send_Command(">PRE-FORCES", mm_comm);
    MDI_Send(&forces, 3*natoms, MDI_DOUBLE, mm_comm);

    // Do an MD timestep
    MDI_Send_Command("ATOM_STEP", mm_comm);

    cout << "timestep: " << iiteration << " " << mm_energy << endl;
  }

\endcode

The above code does the following:
  -# Queries the number of atoms from the MM engine and allocates appropriately sized arrays for the coordinates and forces
  -# Orders the MM engine to initialize a new MD simulation
  -# Begins an iterative loop over MD iterations
    -# Receives the atomic coordinates from the MM engine and updates the QM engine with them
    -# Orders the QM engine to relax the electronic distribution of its system
    -# Receives the energy of the QM and MM systems
    -# Receives the atomic forces from the QM engine and sends them to the MM engine
    -# Orders the MM engine update the atomic coordinates

Finally, we should send an MDI command to cause the engines to exit.
Add the following immediately after the comment that reads \"<c>Send the "EXIT" command to each of the engines</c>\":

\code
  // Send the "EXIT" command to each of the engines
  MDI_Send_Command("EXIT", mm_comm);
  MDI_Send_Command("EXIT", qm_comm);
\endcode

\subsection compile_sec Driver Compilation

The cookiecutter came with everything you need to build with CMake.
To compile, simply navigate to the directory where you want the driver to be built, then do the following, replacing \"<\c driver_top_directory>\" with the path to top directory of your driver repository.

\code
cmake <driver_top_directory>
make
\endcode

\subsection engine_sec Engine Compilation

You are now the proud owner of an MDI driver, but without a QM engine and an MM engine your driver can't actually do anything.
We will now install the LAMMPS and QE codes, which can be used as MDI engines.

\subsection running_sec Using the Driver

We will now run an AIMD simulation with the driver.

\subsection final_notes Final Notes

Note that although we used QE as the QM code and LAMMPS as the MM code, we swap out QE for any QM engine with MDI support or LAMMPS for any MM engine with MDI support.
Furthermore, nothing about our AIMD driver strictly requires that the code named "QM" actually corresponds to a quantum mechanics code.
You could, for example, use LAMMPS as the QM code, while another instance of LAMMPS serves as the MM code.
This would look like:

The above script allows you to run a calculation that will produce to same results as simply running an MD simulation entirely within a single instance of LAMMPS.
Although not generally useful for production runs, this can be a good way to benchmark the cost of the computational overhead introduced by using our driver as a middleman between two codes.

In other cases, it may be desirable to use two different MM codes as the engines if, for example, you wish to use a force field from one MM code and a thermostat from another MM code.
The only requirement on the engines is that the "QM" code supports all of the MDI commands sent by the AIMD driver to the "QM" engine, and that the "MM" code supports all of the MDI commands sent by the AIMD driver to the "MM" engine.

**/